<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html ;charset=utf-8" />
    <title><%= title %></title>
    <script src="javascripts/vue.js"></script>
    <script src="javascripts/axios.js"></script>
    <style>
        *{
            margin: 0;
            padding: 0;
        }
        .configcont{
            display: flex;
            display: -webkit-flex;
            flex-direction: column;
            padding: 10px 25px;
        }
        .greet {
            border-top: 1px solid #A0A0A0;
            margin-bottom: 20px;
        }
        .configtitle{
            background-color: #3fb34f;
            border-radius: 5px;
            width: 150px;
            height: 30px;
            line-height: 30px;
            color: #fff;
            padding-left: 5px;
            margin: 20px 15px;
        }
        .save {
            display: inline-block;
            width: 50px;
            height: 25px;
            line-height: 25px;
            color:  #337ab7;
            text-align: center;
            background-color: #fff;
            border: 1px solid #337ab7;
            border-radius: 3px;
            margin-left: 10px;
            cursor: pointer;
        }
        .greetintput {
            height: 20px;
            width: 50%;
            margin-left: 45px;
            transform: translateY(-1px);
        }
        .cardcenter {
            border-top: 1px solid #A0A0A0;
            margin-bottom: 20px;
        }
        .createcard {
            width: 90px;
            margin-left: 0;
        }
        .cardplain {
            padding: 0px 45px;
        }
        .cardnotice {
            color: #a0a0a0;
            font-size: 14px;
        }
        .carditem {
            margin: 15px 0;
        }
        .carditem span{
            margin-right: 10px;
        }
        .carditem input {
            margin-right: 20px;
        }
        .lbitem {
            height: 80px;
        }
        .lbimg {
            border-top: 1px solid #A0A0A0;
            margin-bottom: 20px;
        }
        .lbcont {
            padding: 0 45px;
        }
        .pre {
            margin: 0 20px;
        }
        .food {
            border-top: 1px solid #A0A0A0;
            margin-bottom: 20px;
        }
        .square {
            width: 40px;
            height: 40px;
        }
        .foodcont {
            padding: 0 45px;
        }
        .foodspan {
            margin-right: 10px;
        }
        .foodinput {
            margin-right: 20px;
        }
        .foodadd {
            padding-top: 20px;
        }
        .down {
            border-bottom: 2px solid #a0a0a0;
            border-right: 2px solid #a0a0a0;
            width: 13px;
            height:13px;
            display: inline-block;
            transform: rotate(-45deg);
            margin-left: 15px;
        }
        .up {
            border-bottom: 2px solid #a0a0a0;
            border-right: 2px solid #a0a0a0;
            width: 13px;
            height:13px;
            display: inline-block;
            transform: rotate(45deg);
            margin-left: 15px;
        }
        .foodkind {
            border-top: 1px solid #A0A0A0;
            margin-bottom: 20px;
        }
        .foodkindcont {
            padding: 0 45px;
        }
        .foodkindleft p {
            width: 50px;
            height: 40px;
            line-height: 40px;
            border-radius: 10px;
            text-align: center;
        }
        .foodkindleftpactive {
            background-color: deepskyblue;
        }
        .foodkindleft p{
            cursor: pointer;
        }
        .foodkindright {
            display: flex;
            display: -webkit-flex;
        }
        .foodkindleft {
            width: 80px;
        }
        .foodkinditem {
            display: flex;
            display: -webkit-flex;
        }
        .foodkindsepar {
            margin-right: 20px;
        }
    </style>
</head>
<body>
<div id="configmain">
  <div class="configcont">
      <div class="greet">
          <p class="configtitle">问候语</p>
           <input placeholder="限制在200字以内" v-model="greet"  class="greetintput"/><span class="save" @click="changegreet">保存</span>
      </div>
      <div class="cardcenter">
          <p class="configtitle">卡券</p>
          <div class="cardplain">
              <p>已投放卡券</p>
              <p class="cardnotice">(说明：下面的数据表示，在消费满限制元时可使用卡券抵挡面值元的金额)</p>
              <div class="cardthrowed">
                  <div v-for="(item,index) in cardcenter" :key="index" class="carditem">
                      <span>面值</span><input type="number" v-model="item.value" readonly/>
                      <span>限制</span><input type="number" v-model="item.uselimit" readonly/>
                      <span>库存</span><input type="number" v-model="item.count" readonly/>
                  </div>
              </div>
              <p class="save createcard" @click="iscreate=false" v-if="iscreate">新建卡券</p>
              <div v-if="!iscreate" class="carditem">
                  <span>面值</span><input type="number" v-model="newvalue" />
                  <span>限制</span><input type="number" v-model="newuselimit" />
                  <span>库存</span><input type="number" v-model="newcount" />
                  <span class="save" @click="createcard">新建</span>
              </div>
          </div>
      </div>
      <div class="lbimg">
          <p class="configtitle">轮播图</p>
          <div class="lbcont">
              <div class="lbitem" v-for="(item,index) in lbimg" :key="index">
                  <p><input readonly v-model="item.lbimg" /> <span :data-lbid="item.lbid" :data-lbindex="index" class="save" @click="lbdelete($event)">删除</span> <span class="pre">预览:</span><img width="80px" height="50px" :src="item.lbimg"/></p>
              </div>
              <p class="save createcard" @click="iscreatelb=false" v-if="iscreatelb">新增轮播图</p>
              <div v-if="!iscreatelb">
                  <p class="mynewlb"><input  v-model="newlb" /> <span  class="save" @click="lbadd">新增</span> <span class="pre">预览:</span><img  width="80px" height="50px" :src="newlb"/></p>
              </div>
          </div>
      </div>
      <div class="food">
          <p class="configtitle">食品</p>
          <div class="foodcont">
              <div>
                  <p @click="downorup">已有食品<span  :class="square"></span></p>
              </div>
              <div v-if="foodshow">
                  <div class="fooditem" v-for="(item,index) in food" :key="index">
                      <p><span class="foodspan">名称</span><input readonly v-model="item.name" class="foodinput"></input><span class="foodspan">价格</span><input readonly v-model="item.price" class="foodinput"></input><span class="foodspan">描述</span><input readonly v-model="item.des" class="foodinput"></input><span>图片</span><img :src="item.img" width="50px" height="50px"><span :data-id="item.id" :data-index="index"  @click="fooddelete" class="save">删除</span></p>
                  </div>
              </div>
              <div class="foodadd">
                  <p class="save createcard" @click="isfoodadd=false" v-if="isfoodadd">新增食品</p>
                  <p v-else><span class="foodspan">名称</span><input  v-model="newfoodname" class="foodinput"></input><span class="foodspan">价格</span><input  type="number" v-model="newfoodprice" class="foodinput"></input><span class="foodspan">描述</span><input  v-model="newfooddes" class="foodinput"></input><span>图片</span><input v-model="newfoodimg"/><img :src="newfoodimg" width="50px" height="50px"><span   @click="foodadd" class="save">新增</span></p>
              </div>
          </div>
      </div>
      <div class="foodkind">
          <p class="configtitle">种类</p>
          <div class="foodkindcont">
              <div v-for="(item,index) in foodkind" class="foodkinditem">
                  <div class="foodkindleft">
                      <p :data-type="index" @click="foodkindchange" :class="{foodkindleftpactive:foodkindindex==index}">{{item.type}}</p>
                  </div>
                  <div class="foodkindright" v-show="foodkindindex==index">
                      <div class="foodkindsepar">
                          <select v-model="foodkdadd">
                              <option v-for="(ssitem,ssindex) in foodkindadd" :value="ssitem.id">{{ssitem.name  }}  ￥{{ssitem.price}}</option>
                          </select><span class="save" @click="foodkdaddm">新增</span>
                      </div>
                      <div v-if="item.detail.length>0"><select v-model="foodkdjian">
                              <option v-for="(sitem,sindex) in item.detail" :value="sitem.foodid">{{sitem.name  }}  ￥{{sitem.price}}</option>
                          </select><span class="save" @click="foodkdjianm">删除</span></div>
                      <div v-else>
                          <span>无可删除食品~~</span>
                      </div>
                  </div>
              </div>
          </div>
      </div>
  </div>

</div>
</body>
<script>
    var vm = new Vue({
        el: '#configmain',
        data: {
            baseUrl:'http://192.168.43.126:3000/',
            greet:'',
            cardcenter:[],
            iscreate:true,
            newvalue:0,
            newuselimit:0,
            newcount:0,
            iscreatelb: true,
            newlb:'',
            lbimg: [], // 轮播图
            food: [], // 食物
            foodshow: false,
            isfoodadd: true,
            newfoodname:'',
            newfoodimg:'',
            newfoodprice:0,
            newfooddes:'',
            square: 'down',
            foodkind:[],
            foodkindindex:0,
            foodkindadd: [] ,//食品种类新增时用到
            foodkdadd: '',
            foodkdjian: '',
            foddkindshunxu: ['rx','cc','lc','gjf','tl','xc','zs','yp']
        },
        methods: {
            //公共的一些方法
            downorup(){
              if(this.square == 'down') {
                  this.square = 'up';
                  this.foodshow =true;
              }else {
                  this.square = 'down';
                  this.foodshow =false;
              }
            },
            myget(url,callback) {  //公共的get请求
                if(!url || !callback) {
                    throw new Error('url和回调函数是两个必要的参数');
                    return ;
                }
                axios.get(url).then(res=>{
                    let data = res.data;
                    if(data.error == -1) {
                        alert('数据加载出错'+data.errmsg);
                        return;
                    }
                    callback&callback(data);
                }).catch(err => {
                    alert('数据加载出错： '+err);
                });
            },
            //公共的post方法
            mypost(url,data,callback){
                 axios.post(url,data).then(res=>{
                     let data = res.data;
                     if(data.error == -1){
                         alert('数据加载出错'+data.errmsg);
                         return;
                     }
                     callback&callback(data);
                 }).catch(err =>{
                     alert(err);
                 })
            },

            //拉去数据的处理方法
            getgreet(data) {
                let mydata = data.data;
                this.greet = mydata.greet;
            },
            getcardcenter(data){
                let mydata = data.data;
                this.cardcenter = mydata;
            },
            getlbimg(data) {
                this.lbimg = data.data||[];
            },
            getfood(data) {
                console.log(data);
                this.food = data.data || [];
            },
            getfoodkind(data) {
                data = data.data || [];
                let mymap ='热销,炒菜,凉菜,盖浇饭,汤类,小吃,主食,饮品'.split(',');
                let result = new Array(8);
                let resultlen  = result.length;
                data.forEach(val =>{
                   result[mymap.indexOf(val.type)] = val;
                })
                for(let i=0;i< resultlen;i++){
                    if(!result[i]) {
                        result[i] = {};
                        result[i].type = mymap[i];
                        result[i].detail = [];
                    }
                }
                this.foodkind = result;
                this.foodkindselect();
                console.log(this.foodkind);
            },

            //提交修改配置的一些方法
            changegreet(){
                if(!this.greet) {
                    alert('问候语必须非空')
                    return;
                }
                this.mypost(this.baseUrl+'greet',{newgreet:this.greet},function () {
                   alert('修改成功');
                });
            },
            createcard() { // 创建卡券
                let self = this;
                if(!this.newvalue|| !this.newuselimit || !this.newcount) {
                    alert('卡券面值、限制以及库存均不能为空');
                    return ;
                }
                this.mypost(this.baseUrl+'cardcenter',{
                    value: this.newvalue,
                    uselimit: this.newuselimit,
                    count: this.newcount
                },function () {
                    alert('新建成功');
                    self.cardcenter = [...self.cardcenter,{
                        value: self.newvalue,
                        uselimit: self.newuselimit,
                        count: self.newcount
                    }];
                    self.newvalue = 0;
                    self.newuselimit = 0;
                    self.newcount = 0;
                    self.iscreate = true;
                })
            },
            lbdelete(event) { //删除轮播图
                let self = this;
                console.log(event);
                let target = event.target;
                let {lbid,lbindex} = target.dataset;
                this.mypost(this.baseUrl+'lunboimg',{
                    lbid: lbid,
                    flag: 1
                },function () {
                    self.lbimg.splice(lbindex,1);
                    alert('删除成功');
                })
            },
            lbadd() { //新增一条轮播图
                let self = this;
                if(!this.newlb) {
                    alert('轮播图地址不能为空')
                    return;
                }
                this.mypost(this.baseUrl+'lunboimg',{
                    lbimg: self.newlb,
                    flag: 2
                },function (data) {
                    self.lbimg = [...self.lbimg,{
                        lbimg: self.newlb,
                        lbid: data.data.lbid
                    }];
                    console.log(self.lbimg);
                    self.iscreatelb = true;
                    self.newlb = "";
                })
            },
            fooddelete(e) { // 删除食物
                let self =this;
               let {id,index} = e.target.dataset;
               //请求删除接口
                this.mypost(this.baseUrl+'food',{
                    id: id,
                    flag: 1
                },function (data) {
                    self.food.splice(index,1);
                    // 遍历食物种类数据，删除掉已删除的foodId食物
                    self.foodkindalldelete(id);
                    self.foodkindselect(); // 更新种类中的新增食品
                })
            },
            foodadd() {
                let self = this;
                if( !this.newfoodname|| !this.newfoodimg|| !this.newfoodprice|| !this.newfooddes) {
                    alert('所有字段均不为空');
                    return;
                }
                this.mypost(this.baseUrl+'food',{
                    flag: 2,
                    name: this.newfoodname,
                    price: this.newfoodprice,
                    img: this.newfoodimg,
                    des: this.newfooddes
                },function (data) {
                  self.food = [...self.food,{
                      name: self.newfoodname,
                      price: self.newfoodprice,
                      des: self.newfooddes,
                      img: self.newfoodimg,
                      id: data.data[0].id
                  }];
                  self.isfoodadd = true;
                  self.newfoodname='';
                  self.newfoodprice = 0;
                  self.newfooddes = "";
                  self.newfoodimg ="";
                  self.foodkindselect();
                })
            },
            foodkindalldelete(id){
                this.foodkind.forEach(val =>{
                  val.detail = val.detail.filter(tval =>{
                      return tval.foodid != id;
                  })
                })
            },
            foodkindchange(e) {
                let {type} = e.target.dataset;
                this.foodkindindex=type;
                this.foodkindselect();
                this.foodkdadd = "";
                this.foodkdjian = "";
            },
            foodkindselect(){  //新增的食品种类中的数据
                 // this.foodkindindex 代表哪一个种类被选中 foodkindadd
                this.foodkindadd = this.food.filter(val =>{
                    let flag = true;
                    let myfoodkingdata =  this.foodkind[this.foodkindindex].detail;
                    let mylen = myfoodkingdata.length;
                    for(let i =0;i<mylen;i++){
                        if(val.id==myfoodkingdata[i].foodid){
                            flag = false;
                            break;
                        }
                    }
                    return flag;
                });
            },
            getfoodinfo(id){
                return this.food.filter(val=>{
                    return val.id == id;
                })
            },
            foodkdaddm(){
                let self = this;
                if(!this.foodkdadd) {
                    alert('新增食品不能为空');
                    return;
                }
                this.mypost(this.baseUrl+'orderMainfood',{
                    flag:2,
                    kind: this.foddkindshunxu[this.foodkindindex],
                    foodid: this.foodkdadd
                },function (data) {
                    if(data.error == 0){
                        alert('食品添加成功');
                        //添加成功后从新增食品项目中删掉，加入到删除食品项目中
                        self.foodkindadd = self.foodkindadd.filter(tem=>{
                            return tem.id != self.foodkdadd;
                        });
                        let mytemp =  self.getfoodinfo(self.foodkdadd)[0];
                        self.foodkind[self.foodkindindex].detail.push({
                            foodid: self.foodkdadd,
                            name: mytemp.name,
                            price: mytemp.price
                        }) ;
                            self.foodkdadd = '',
                            self.foodkdjian =  ''

                    }else {
                        alert('食品添加失败');
                    }
                });
            },
            foodkdjianm() {
                let self = this;
                if(!this.foodkdjian) {
                    alert('删除食品不能为空');
                    return;
                }
                this.mypost(this.baseUrl+'orderMainfood',{
                    flag:1,
                    kind: this.foddkindshunxu[this.foodkindindex],
                    foodid: this.foodkdjian
                },function (data) {
                    console.log(data);
                    if(data.error == 0){
                        //删除成功后从删除食品项目中删掉，加入到新增食品项目中
                        let mytemp =  self.getfoodinfo(self.foodkdjian)[0];
                        self.foodkind[self.foodkindindex].detail = self.foodkind[self.foodkindindex].detail.filter(val=>{
                            return val.foodid != self.foodkdjian;
                        })
                        self.foodkindadd.push({
                            id: self.foodkdadd,
                            name: mytemp.name,
                            price: mytemp.price
                        });
                        alert('食品删除成功');
                            self.foodkdadd = '',
                            self.foodkdjian =  ''
                    }else {
                        alert('食品删除失败');
                    }
                })
                console.log(this.foodkdjian)
                console.log(this.foddkindshunxu[this.foodkindindex])
            }
        },
        mounted() {
            this.myget(this.baseUrl+'greet',this.getgreet);// 获取问候
            this.myget(this.baseUrl+'cardcenter',this.getcardcenter); //获取投放的卡券
            this.myget(this.baseUrl+'lunboimg',this.getlbimg)//获取轮播图
            this.myget(this.baseUrl+'food',this.getfood)//获取食物列表
            this.myget(this.baseUrl+'orderMainfood',this.getfoodkind); // 请求食物所属种类接口
        }
    })

</script>
</html>
